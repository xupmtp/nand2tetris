// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array digit;

    /** Initializes the library. */
    function void init() {
        let digit = Array.new(16);
        let digit[0] = 1;
        let digit[1] = 2;
        let digit[2] = 4;
        let digit[3] = 8;
        let digit[4] = 16;
        let digit[5] = 32;
        let digit[6] = 64;
        let digit[7] = 128;
        let digit[8] = 256;
        let digit[9] = 512;
        let digit[10] = 1024;
        let digit[11] = 2048;
        let digit[12] = 4096;
        let digit[13] = 8192;
        let digit[14] = 16384;
        let digit[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let shiftedX = x;
        let i = 0;
        let sum = 0;

        while (i < 16) {
            // y是由後往前填充,所以取最小值是bit(15)
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            // 往下一位
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** 取得n二進位表示第i位的值,true: 1,false: 0 */
    function boolean bit(int n, int i) {
        // 必須判斷 != 0, 判斷>0可能因補位關係產生錯誤
        return ~((n & digit[i]) = 0);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int cX, cY;
        let cX = Math.abs(x);
        let cY = Math.abs(y);

        if ((x < 0 | y < 0) & ~(x < 0 & y < 0)) {
            return -(Math.divideRecur(cX, cY));
        }
        return Math.divideRecur(cX, cY);
    }

    function int divideRecur(int x, int y) {
        var int q;
        if (x < y | y < 0) {
            return 0;
        }
        let q = Math.divideRecur(x, y + y);
        if ((x - (2 * q * y)) < y) {
            return q + q;
        }
        return q + q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, cod;
        let y = 0;
        let j = 7; // 16bit / 2 - 1
        while (~(j < 0)) {
            let cod = (y + digit[j]) * (y + digit[j]);
            // >0防止溢位
            if (~(cod > x) & cod > 0) {
                let y = y + digit[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
